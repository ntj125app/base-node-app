name: Build App Container Image for Staging

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  build-app:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      ENV_BASE64: ${{ secrets.ENV_BASE64_DEV }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Delete all containers from package without tags
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ vars.IMAGE_NAME }}
          package-type: container
          delete-only-untagged-versions: true
          
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create .env file
        if: env.ENV_BASE64 != ''
        run: echo "$ENV_BASE64" | base64 -d > .env
      - name: Add variable for application
        run: |
          echo "APP_VERSION_HASH=${{ github.sha }}" >> .constants

      - name: NPM Setup
        uses: bahmutov/npm-install@v1

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get & Set Container Metadata
        id: meta-packages
        uses: docker/metadata-action@v5
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Clean Build App
        run: rm -rf .git .github
      - name: Build & Push Container
        uses: docker/build-push-action@v5
        if: env.REGISTRY != '' && env.IMAGE_NAME != ''
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-packages.outputs.tags }}-staging
          labels: ${{ steps.meta-packages.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
